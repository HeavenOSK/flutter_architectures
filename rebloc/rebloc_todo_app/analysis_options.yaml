analyzer:
  strong-mode:
    implicit-casts: false
  errors:
    # treat missing required parameters as a warning (not a hint)
    missing_required_param: warning
    # treat missing returns as a warning (not a hint)
    missing_return: warning
    # allow having TODOs in the code
    todo: ignore
    # Ignore analyzer hints for updating pubspecs when using Future or
    # Stream and not importing dart:async
    # Please see https://github.com/flutter/flutter/pull/24528 for details.
    sdk_version_async_exported_from_core: ignore

  exclude:
    - ios/**
    - android/**

linter:
  rules:
    - always_declare_return_types
    - always_put_control_body_on_new_line
    # - always_put_required_named_parameters_first # we prefer having parameters in the same order as fields https://github.com/flutter/flutter/issues/10219
    - always_require_non_null_named_parameters
    # - always_specify_types
    - annotate_overrides
    - avoid_annotating_with_dynamic
#    - avoid_as
#    - avoid_bool_literals_in_conditional_expressions  under review (see 1068)
    - avoid_catches_without_on_clauses
    - avoid_catching_errors
    - avoid_classes_with_only_static_members
    # - avoid_double_and_int_checks # only useful when targeting JS runtime
    - avoid_empty_else
    - avoid_field_initializers_in_const_classes
    - avoid_function_literals_in_foreach_calls
    # - avoid_implementing_value_types # not yet tested
    - avoid_init_to_null
#    - avoid_js_rounded_ints  under review (see 1068)
#    - avoid_null_checks_in_equality_operators
#    - avoid_positional_boolean_parameters
#    - avoid_private_typedef_functions  under review (see 1068)
#    - avoid_relative_lib_imports  under review (see 1068)
#    - avoid_renaming_method_parameters  under review (see 1068)
    - avoid_return_types_on_setters
#    - avoid_returning_null
    - avoid_returning_this
    - avoid_setters_without_getters
#    - avoid_single_cascade_in_expression_statements  under review (see 1068)
    - avoid_slow_async_io
#    - avoid_types_as_parameter_names  under review (see 1068)
#    This is unnecessary.
#    - avoid_types_on_closure_parameters
#    - avoid_unused_constructor_parameters  under review (see 1068)
#    - avoid_void_async  under review (see 1068)
    - await_only_futures
    - camel_case_types
    - cancel_subscriptions
#    - cascade_invocations
    - close_sinks
#    - comment_references
#    - constant_identifier_names
    - control_flow_in_finally
    # - curly_braces_in_flow_control_structures # not yet tested
    - directives_ordering
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
#    - file_names  under review (see 1068)
    - hash_and_equals
#    - implementation_imports
#    - invariant_booleans
    - iterable_contains_unrelated_type
    # - join_return_with_assignment # not yet tested
    - library_names
    - library_prefixes
    # - lines_longer_than_80_chars # not yet tested
    - list_remove_unrelated_type
    # - literal_only_boolean_expressions # too many false positives: https://github.com/dart-lang/sdk/issues/34181
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - non_constant_identifier_names
#    - null_closures  under review (see 1068)
#    - omit_local_variable_types
#    - one_member_abstracts
    - only_throw_errors
    - overridden_fields
    - package_api_docs
    - package_names
    - package_prefixed_library_names
    # - parameter_assignments # we do this commonly
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
#    - prefer_const_constructors_in_immutables
#    - prefer_const_declarations  under review (see 1068)
#    - prefer_const_literals_to_create_immutables  under review (see 1068)
    - prefer_constructors_over_static_methods
    - prefer_contains
    - prefer_equal_for_default_values
    # - prefer_expression_function_bodies # conflicts with https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#consider-using--for-short-functions-and-methods
    - prefer_final_fields
    - prefer_final_locals
    - prefer_foreach
    # - prefer_function_declarations_over_variables # not yet tested
    - prefer_generic_function_type_aliases
    - prefer_initializing_formals
#    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_iterable_whereType
#    - prefer_mixin
    - prefer_single_quotes
#    - prefer_typing_uninitialized_variables  under review (see 1068)
#    - prefer_void_to_null  under review (see 1068)
#    - prefer_int_literals
#    - public_member_api_docs
    - recursive_getters
    - slash_for_doc_comments
    - sort_constructors_first
    - sort_pub_dependencies
    - sort_unnamed_constructors_first
    # - super_goes_last # no longer needed w/ Dart 2
    - test_types_in_equals
    - throw_in_finally
    # - type_annotate_public_apis # subset of always_specify_types
    - type_init_formals
#    - unawaited_futures
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_getters_setters
    # - unnecessary_lambdas # has false positives: https://github.com/dart-lang/linter/issues/498
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_in_if_null_operators
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_statements
    - unnecessary_this
    - unrelated_type_equality_checks
    # - use_function_type_syntax_for_parameters # not yet tested
    - use_rethrow_when_possible
    # - use_setters_to_change_properties # not yet tested
    # - use_string_buffers # has false positives: https://github.com/dart-lang/sdk/issues/34182
    # - use_to_and_as_if_applicable # has false positives, so we prefer to catch this by code-review
    - valid_regexps
    # - void_checks # not yet tested